<navigation-bar title="使用page构造页面" back="{{true}}" color="black" background="#FFF"></navigation-bar>
<!-- 1、可滚动的 div 标签（scroll-y或者scroll-x必选，且必须设置高度） -->
<scroll-view class="scrollarea" scroll-y type="list">
  <!-- 2、类似 div 标签 -->
  <view class="container">
    <!-- 3、文本标签：类似 span（user-select表示长按可以选中复制） -->
    <text user-select>pages/list/list.wxml</text>

    <!-- 4、图片标签，类似 img （mode: 图片裁剪、缩放的模式）-->
    <!-- {{ imgSrc }} 动态绑定属性，与vue有点不同 -->
    <image src="{{ imgSrc }}" mode="aspectFit" />

    <!-- 5、超链接标签，类似 a 标签 -->
    <navigator url="www.baidu.com">{{ count }}</navigator>

    <!-- 6、富文本组件，支持把HTML字符串渲染为wxml结构： -->
    <rich-text nodes="<h1 style='color: red;'>kzt</h1>"></rich-text>

    <!-- 7、按钮组件：类似element-ui -->
    <button>普通按钮</button>
    <!-- 8、绑定事件：使用bind:tap或者bindtap，绑定触摸事件 -->
    <button type="primary" bind:tap="onClick">主题色按钮</button>
    <button type="warn" size="mini" plain>镂空按钮</button>
    <!-- 9、响应式 -->
    <button bind:tap="onCountAdd">+1</button>
    <!-- 10、事件传参：与vue中onParaTest(111)不同，这里需要使用 data-* 的方式传参： -->
    <button bind:tap="onParaTest" data-info="{{ 22 }}">事件传参</button>

    <!-- 11、通过value和bind:input实现双向数据绑定： -->
    <input type="text" placeholder="请输入" value="{{inputValue}}" bind:input="onInputChange" />
    <!-- 12、2023新版，通过model实现双向数据绑定： -->
    <input type="text" placeholder="请输入" model:value="{{inputValue}}" />

    <!-- 13、条件渲染1：是否渲染 -->
    <view wx:if="{{sexType===1}}">男</view>
    <view wx:elif="{{sexType===2}}">女</view>
    <view wx:else>保密</view>

    <!-- 14、条件渲染2：显示与隐藏 -->
    <view hidden="{{sexType===2}}">hidden控制显示与隐藏</view>

    <!-- 15、block标签：一个包裹容器，不会渲染出来，类似vue中的template -->
    <block wx:if="{{count===1}}">
      <view>block标签演示1</view>
      <view>block标签演示2</view>
    </block>

    <!-- 16、列表渲染（默认index、item） -->
    <view wx:for="{{arrList}}" wx:key="index">
      索引是：{{index}}；当前项是：{{item}}；
    </view>
    <!-- 17、列表渲染（自定义index、item） -->
    <view wx:for="{{arrList}}" wx:key="index1" wx:for-index="index1" wx:for-item="info">
      索引是：{{index1}}；当前项是：{{info}}；
    </view>

    <!-- 18、发送请求： -->
    <button bind:tap="getUserInfo">发送get请求</button>
    <button bind:tap="postInfo">发送post请求</button>
  </view>

  <!-- 19、自定义组件的使用：局部组件在.json文件先引入 -->
  <base-com max="20"></base-com>

  <!-- 20、组件的生命周期学习 -->
  <com-life-cycle></com-life-cycle>

  <!-- 21、组件的单slot插槽学习： -->
  <slot-learn>
    <view>这是插入插槽的内容</view>
  </slot-learn>
  <!-- 22、组件的多slot插槽学习：使用slot属性给插槽具名 -->
  <slot-learn>
    <view slot="slot1">这是插入插槽1的内容</view>
    <view slot="slot2">这是插入插槽2的内容</view>
  </slot-learn>

  <!-- 23、父子组件通信学习： -->
  <parent-com></parent-com>

  <!-- 23、behavior学习： -->
  <behavior></behavior>
</scroll-view>